@model IEnumerable<Product2>
<h1><center>Products</center></h1>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Product Information";

}
<form class=" form-check">
   
    <h2>Add Product</h2>
    <input type="hidden" id="hdn-product-id" />
    <div class="bp">
        <div class="col-sm-6">
            <label for="ProductName" class="form-label">ProductName</label>
            <input type="text" class="form-control" id="ProductName" name="ProductName" placeholder="Enter ProductName">
            <div class="text-danger validation-message" id="ProductValidation"></div>
        </div>

        <div class="col-sm-6">
            <label for="Description" class="form-label">Description</label>
            <input type="text" class="form-control" id="Description" name="Description" placeholder="Enter Description">
            <div class="text-danger validation-message" id="DescriptionValidation"></div>
        </div>
        

        <div class="col-sm-6">
            <label for="Price" class="form-label">Price </label>
            <input type="text" class="form-control" id="Price" name="Price" placeholder="Enter Price">
            <div class="text-danger validation-message" id="PriceValidation"></div>
        </div>

        <div class="col-sm-6">
            <label for="Category" class="form-label">Category</label>
            <input type="text" class="form-control" id="Category" name="Category" placeholder="Enter Category">
            <div class="text-danger validation-message" id="CategoryValidation"></div>
        </div>

        <div class="col-sm-6">
            <label for="StockQuantity" class="form-label">StockInQuantity</label>
            <input type="text" class="form-control" id="StockQuantity" name="StockQuantity" placeholder="Enter StockQuantity">
            <div class="text-danger validation-message" id="StockQuantityValidation"></div>
        </div>

        <div class="col-sm-6">
            <label for="DateAdded" class="form-label">DateAdded</label>
                <input type="text" class="form-control"  id="DateAdded" name="DateAdded" placeholder="Enter Date">
            <div class="text-danger validation-message" id="DateAddedValidation"></div>             
            </div>

        @* </div>*@
        <div class="col-sm-6">
            <label for="ImageFile" class="form-label">ImageFile</label>
            <input type="file" class="form-control" id="ImageFile" name="ImageFile">
            <div class="text-danger validation-message" id="ImageFileValidation"></div>
        </div>
        <div class="col-sm-6">
            <img id="preview-image" style="max-width: 200px; max-height: 200px;">
            </div>
        </div>
              
    </div>
</form>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Products</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="/css/site.css" />
  @*   <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css">
   
 *@
        <style>
        table {
           
            width: 100%;
            border-collapse: collapse;
            background-color:lightcyan;
        }

        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

            th.sort-link {
                cursor: pointer;
            }

        .bp {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
        }

        .btn {
            padding: 5px 10px;
            margin: 2px;
            cursor: pointer;
        }

        .btn-primary {
            background-color: #007bff;
            color: white;
            border: none;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
            border: none;
        }

        .mb-3 {
            margin: 0 0 1rem 8.3rem !important;
        }

        .product-image {
            max-width: 100px;
            max-height: 100px;
            object-fit: cover;
        }

        .preview-image {
            max-width: 100px;
            max-height: 100px;
            object-fit: cover;
        }

       @* .form-inline {
            
            margin-bottom: 20px;
        }*@

    </style>
</head>
<body>


        <div class="form-inline mb-3">
        <button type="button" class=" offset-sm-2 btn btn-primary" id="Add_Product">SAVE</button>
            <button type="button" class="btn btn-danger" id="deleteSelected">Delete Selected Items</button>
            <button type="button" class="btn btn-warning" id="update_product">UPDATE</button>
            <button type="button" class="btn btn-light" id="clear_product">CLEAR</button>
        </div>
    <div class="container">
        <div class="row-mb-5">
        <div class=" col-sm-4 form-group mx-sm-3 mb-2">
            <label for="searchString" class="sr-only">Search Products</label>
            <input type="text" class="form-control" id="searchString" name="searchString" placeholder="Search Products">
        </div>
        <div class="col-sm-6"></div>
        </div>

        <table id="Product_table" class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>
                        <input type="checkbox" id="selectAll" data-id="product-id" class="rowCheckbox"  />
                    </th>
                    <th class="sort-link" data-sort="ProductId">ProductId</th>
                    <th>
                       ProductImage
                    </th>
                    <th class="sort-link" data-sort="ProductName">ProductName</th>
                  
                    <th class="sort-link" data-sort="Description">Description</th>
                    <th class="sort-link" data-sort="Price">Price </th>
                    <th class="sort-link" data-sort="Category">Category</th>
                    <th class="sort-link" data-sort="StockInQuantity">StockQuantity</th>
                    <th class="sort-link" data-sort="DateAdded">DateAdded</th>
                    <th>Action</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in Model)
                {
                    <tr>
                        <td><input type="checkbox" class="rowCheckbox" data-product-id="@product.ProductId" /></td>
                        <td>@product.ProductId</td>
                        <td>
                            <a href="@Url.Action("ProductDetail","ProductController2", new { productId = product.ProductId })">

                            @if (product.ImageFile != null)
                            {
                                var base64Image = Convert.ToBase64String(product.ImageFile);
                                <img src="data:image/jpeg;base64,@base64Image" alt="product Image" class="product-image" style="max-width: 100px; max-height: 100px;" />
                            }
                            else
                            {
                                <img src="" alt="No Image Available" class="product-image" style="max-width: 100px; max-height: 100px;" />
                            }
                        </td>
                        <td>@product.ProductName</td>
                        <td>@product.Description</td>
                        <td>@product.Price</td>
                        <td>@product.Category</td>
                        <td>@product.StockQuantity</td>
                        <td>@product.DateAdded</td>
                        <td><button type="button" id="edit" data-edit-id="@product.ProductId" class="btn btn-success">Edit</button></td>
                        <td><button type="button" id="delete" data-delete-id="@product.ProductId" class="btn btn-danger" onclick="return confirm('Are You Sure Want To Delete?')">Delete</button></td>
                    </tr>
                    
                }
                @if (!Model.Any())
                {
                    <tr>
                        <td colspan="10">No data available</td>
                    </tr>
                }
            </tbody>
        </table>

        @if (ViewBag.TotalCount > ViewBag.PageSize)
        {
            <nav aria-label="Page navigation">
                <ul class="pagination">
                    @for (int i = 1; i <= Math.Ceiling((double)ViewBag.TotalCount / ViewBag.PageSize); i++)
                    {
                        <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", "ProductController2", new { page = i, pageSize = ViewBag.PageSize })">@i</a>
                        </li>
                    }
                </ul>
            </nav>
        }
    </div>

    <script>
        $(document).ready(function () {
            var searchString = "";
            var sortBy = "";
            var sortDirection = "asc";
            const fileInput = document.getElementById("ImageFile");
            fileInput.addEventListener("change", function () {
                const file = this.files[0];

                if (file) {
                    const reader = new FileReader();
                    reader.onloadend = function () {
                        const img = document.getElementById("preview-image");
                        img.src = reader.result;
                        img.style.display = "block";
                    };
                    reader.readAsDataURL(file);
                } else {
                    const img = document.getElementById("preview-image");
                    img.src = "";
                    img.style.display = "none";
                }
            });
            $('.sort-link').click(function () {
                var sortColumn = $(this).data('sort');
                if (sortColumn === sortBy) {
                    sortDirection = sortDirection === "asc" ? "desc" : "asc";
                } else {
                    sortBy = sortColumn;
                    sortDirection = "asc";
                }
                performSearch(sortBy,sortDirection);
            });

            $('#deleteSelected').click(function (event) {
                var selectedIds =[];
                 $('.rowCheckbox').each(function () {
                    if ($(this).is(':checked')) {
                        var ProductId = $(this).data('product-id');
                        selectedIds.push(ProductId);
                    }
                });

                if (selectedIds.length === 0) {
                    alert("Please select at least one Product to delete.");
                    return; 
                }
                   // Ask for confirmation before proceeding with deletion
                 var confirmDelete = confirm("Are you sure you want to delete the selected products?");
                 if (!confirmDelete) {
                 return; // If user cancels, do not proceed with deletion
                  }

                $.ajax({
                    url: '@Url.Action("DeleteBulk","ProductController2")',
                    type: 'POST',
                    data: { ids: selectedIds }, 
                    success: function (response) {
                        console.log(response);
                            updateTable(response);
                    },
                    error: function (xhr, status, error) {
                        console.error(error); 
                        alert("An error occurred during deletion.");
                    }
                });
            });
            $('#Product_table').on('click', '.btn-success', function (event) {
                var id = $(this).data('edit-id');
                $.ajax({
                    url: '@Url.Action("Edit","ProductController2")/' + id,
                    type:'POST',
                    success: function (product) {
                        console.log(product)
                        $('#hdn-product-id').val(product.productId);
                        $('#ProductName').val(product.productName);
                        $('#Description').val(product.description);
                        $('#Price').val(product.price);
                        $('#Category').val(product.category);
                        $('#StockQuantity').val(product.stockQuantity);
                        $('#DateAdded').val(product.dateAdded)
                        

                        if (product.imageFile) {
                              console.log('Base64 image data:', product.imageFile);
                            $('#preview-image').attr('src', 'data:image/jpeg;base64,' + product.imageFile);
                        } else {
                            $('#preview-image').attr('src', ''); // Set default image if no pic available
                        }
                    }

                });
            });

         $('#Product_table').on('click','.btn-danger', function (event) {
                var id = $(this).data('delete-id');
                $.ajax({
                    url: '@Url.Action("Delete", "ProductController2")/' + id,
                    type: 'GET',
                    success: function(products){
                        alert('Product deleted successfully');
                        updateTable(products);

                    }

                    
                });
         });

            $('#Add_Product').click(function (event)
            {
                if (!validateForm()) 
                {
                    return;
                }
                var formData = new FormData();
                formData.append("ProductId", $("#hdn-product-id").val());
                formData.append("ProductName", $("#ProductName").val());
                formData.append("Description", $("#Description").val());
                formData.append("Price", $("#Price").val());
                formData.append("Category", $("#Category").val());
                formData.append("StockQuantity", $("#StockQuantity").val());
                formData.append("DateAdded", $("#DateAdded").val());
                formData.append("ImageFile", fileInput.files[0]); // Use fileInput here

                $.ajax({
                    url: '@Url.Action("Add","ProductController2")',
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    cache: false,
                    data: formData,
                    success: function (response) {
                        alert("Product added successfully!");
                        console.log(response);
                        updateTable(response);
                        resetform();
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                        alert("An error occurred while adding the product.");
                    }
                });
            });
            function validateForm()
            {
                var isValid = true;

                // Validate ProductName
                var productName = $("#ProductName").val().trim();
                if (productName === "") 
                {
                    $("#ProductValidation").text("Product Name is required.");
                    isValid = false;
                } 
                else 
                {
                    $("#ProductValidation").text("");
                }

                // Validate Description
                var description = $("#Description").val().trim();
                if (description === "") 
                {
                    $("#DescriptionValidation").text("Description is required.");
                    isValid = false;
                } 
                else
                {
                    $("#DescriptionValidation").text("");
                }

                // Validate Price
                var price = $("#Price").val().trim();
                if (price === "")
                {
                    $("#PriceValidation").text("Price is required.");
                    isValid = false;
                }
                else if (isNaN(price) || parseFloat(price) <= 0) 
                {
                    $("#PriceValidation").text("Price must be a valid number greater than 0.");
                    isValid = false;
                }
                else 
                {
                    $("#PriceValidation").text("");
                }

                // Validate Category
                var Category = $("#Category").val().trim();
                if (Category === "")
                {
                    $("#CategoryValidation").text("Category is required.");
                    isValid = false;
                }
                else 
                {
                    $("#CategoryValidation").text("");
                }
                // Validate StockQuantity
                var StockQuantity = $("#StockQuantity").val().trim();
                if (StockQuantity === "")
                {
                    $("#StockQuantityValidation").text("Enter StockQuantity.");
                    isValid = false;
                }
                else
                {
                    $("#StockQuantityValidation").text("");
                }
                //Validate DateAdded
                var DateAdded = $("#DateAdded").val().trim();
                if (DateAdded === "") 
                {
                    $("#DateAddedValidation").text("Date Added Required");
                    isValid = false;
                }
                else 
                {
                    $("#DateAddedValidation").text("");
                }
                // Validate ImageFile
                var ImageFile = $("#ImageFile").val().trim();
                if (ImageFile === "")
                {
                    $("#ImageFileValidation").text("ImageFile Required");
                    isValid = false;
                }
                else
                {
                    $("#ImageFileValidation").text("");
                }

                return isValid;
            }

           
        
            $('#selectAll').change(function () {
                $('.rowCheckbox').prop('checked', $(this).prop('checked'));
            });

            $('#searchString').on('keyup', function () {
                searchString = $(this).val();
                performSearch(sortBy, sortDirection);
            });

            function performSearch(sortBy,sortDirection) {
                $.ajax({
                    url: '@Url.Action("Search","ProductController2")',
                    type: 'GET',
                    data: { searchString: searchString, sortBy: sortBy },
                    success: function (data) {
                        updateTable(data);
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }
                });
            }
            $('#clear_product').click(function () {
                resetform();
            });
            function resetform() {
                $('#hdn-product-id').val("");
                $('#ProductName').val("");
                $('#Description').val("");
                $('#Price').val("");
                $('#Category').val("");
                $('#StockQuantity').val("");
                $('#DateAdded').val("");
                $("#preview-image").attr('src', '').hide(); // Clear and hide preview image
                $("#ImageFile").val(''); // Clear file input
            }
            $('#update_product').click(function (event) {
                var formData = new FormData();
                formData.append("ProductId", $("#hdn-product-id").val());
                formData.append("ProductName", $("#ProductName").val());
                formData.append("Description", $("#Description").val());
                formData.append("Price", $("#Price").val());
                formData.append("Category", $("#Category").val());
                formData.append("StockQuantity", $("#StockQuantity").val());
                formData.append("DateAdded", $("#DateAdded").val());
                const fileInput = document.getElementById("ImageFile");
                const file = fileInput.files[0];
                formData.append("imageFile", file, file.name);
                $.ajax({
                    url: '@Url.Action("Update", "ProductController2")',
                    type: 'POST',
                    contentType: false,
                    processData: false,
                    cache: false,
                    data: formData,
                    success: function (response) {

                        updateTable(response);
                        resetform();
                    }
                });
            });

            function updateTable(products) {
                console.log(products);
                var tbody = $('#Product_table tbody');
                tbody.empty(); //Clear existing table rows

                products.forEach(function (product) {
                    var row = '<tr>' +
                        '<td><input type="checkbox" class="rowCheckbox" data-product-id="' + product.productId + '" /></td>' +
                        '<td>' + product.productId + '</td>' +
                        '<td><img src="data:image/jpeg;base64,' + product.imageFile + '" alt="Product Image" class="preview-image" style="max-width: 100px; max-height: 100px;" /></td>' +
                        '<td>' + product.productName + '</td>' +
                        '<td>' + product.description + '</td>' +
                        '<td>' + product.price + '</td>' +
                        '<td>' + product.category + '</td>' +
                        '<td>' + product.stockQuantity + '</td>' +
                        '<td>' + product.dateAdded + '</td>' +
                        '<td><button type="button" class="btn btn-success edit-button" data-edit-id="' + product.productId + '">Edit</button></td>' +
                        '<td><button type="button" class="btn btn-danger delete-button" data-delete-id="' + product.productId + '">Delete</button></td>' +
                        '</tr>';
                    tbody.append(row);
                });
            }
        });

          function updateCartItemCount() {
                $.ajax({
                    url: '@Url.Action("CartItems", "Cart")',
                    type: 'GET',
                    success: function (responseArray) {
                        console.log(responseArray)

                        // Initialize a variable to store the total quantity sum
                        let totalQuantitySum = 0;

                        // Iterate through each object in the responseArray
                        responseArray.forEach(item => {
                            // Add the quantity of the current item to totalQuantitySum
                            totalQuantitySum = totalQuantitySum + item.quantity;
                        });

                        // Log the total quantity sum
                        console.log("Total quantity sum:", totalQuantitySum);

                        $('#cartItemCount').text(totalQuantitySum)

                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                        alert("An error occurred while updating cart item count.");
                    }
                });
            }
        $(document).ready(function () {
            updateCartItemCount();
        });
    </script>

    
</body>
</html>
